#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <asm/uaccess.h>
#include <linux/gpio.h>
#include <linux/delay.h>
#include <linux/platform_data/edk9s5422_gpio.h>

#define DEVICE_NAME "piezo"	// Device name

int piezo_gpios;		// gpio 
int piezo_major;		// major number

//////////////////////////////////////////////////////
//        device drive "open" code
//////////////////////////////////////////////////////
static int dd_piezo_open(struct inode * inode, struct file * file)
{
	int err;

	edk9s5422_pie_gpio(&piezo_gpios);	// get GPIO info about piezo

	err = gpio_request(piezo_gpios, "piezo"); //request  Piezo gpio  author
	if(err){
		printk(KERN_INFO "dd_piezo_open(), gpio_request err!\n");
		return -1;
	}

	return 0;
}
//////////////////////////////////////////////////////
//        device drive "release" code
//////////////////////////////////////////////////////

static int dd_piezo_release(struct inode * inode, struct file * file)
{
	gpio_free(piezo_gpios);		// Back piezo gpio author
	return 0;
}

//////////////////////////////////////////////////////
//        device drive "write" code
//////////////////////////////////////////////////////
static ssize_t dd_piezo_write(struct file * file, const char * buf, size_t length, loff_t * ofs)
{
	int ret, value = 0, i;
	ret = copy_from_user(&value, buf, length);
	// when clicked button 'C'	
	if(value == 1) 
	{	
		for(i=0; i<100; i++)
		{
			gpio_direction_output(piezo_gpios, 1);
			mdelay(3);
			udelay(822);
			gpio_direction_output(piezo_gpios, 0);
			mdelay(3);
			udelay(822);
		}
	}
	// when clicked button 'D'	
	else if(value == 2)
	{	
		for(i=0; i<100; i++)
		{
			gpio_direction_output(piezo_gpios, 1);
			mdelay(3);
			udelay(405);
			gpio_direction_output(piezo_gpios, 0);
			mdelay(3);
			udelay(405);
		}
	}
	// when clicked button 'E'
	else if(value == 3)
	{	
		for(i=0; i<100; i++)
		{
			gpio_direction_output(piezo_gpios, 1);
			mdelay(3);
			udelay(34);
			gpio_direction_output(piezo_gpios, 0);
			mdelay(3);
			udelay(34);
		}
	}
	// when clicked button 'F'
	else if(value == 4)
	{	
		for(i=0; i<100; i++)
		{
			gpio_direction_output(piezo_gpios, 1);
			mdelay(2);
			udelay(863);
			gpio_direction_output(piezo_gpios, 0);
			mdelay(2);
			udelay(863);
		}
	}
	// when clicked button 'G'
	else if(value == 5)
	{	
		for(i=0; i<100; i++)
		{
			gpio_direction_output(piezo_gpios, 1);
			mdelay(2);
			udelay(551);
			gpio_direction_output(piezo_gpios, 0);
			mdelay(2);
			udelay(551);
		}
	}
	// Turn off piezo
	gpio_direction_output(piezo_gpios, 0);

	return 0;
}
////////////////////////////////////////////
// Define "file_operations" struct 
////////////////////////////////////////////
static struct file_operations dd_piezo_fops = {
	.owner = THIS_MODULE,
	.open = dd_piezo_open, 
	.release = dd_piezo_release,
	.write = dd_piezo_write,
};

////////////////////////////////////////////
// module init 
////////////////////////////////////////////
static int dd_piezo_init(void){

	piezo_major = register_chrdev(0, DEVICE_NAME, &dd_piezo_fops);
	printk("dd_piezo_init, major number is %d\n", piezo_major);

	return 0;

}

////////////////////////////////////////////
// module exit 
////////////////////////////////////////////
static void dd_piezo_exit(void){
	printk("dd_piezo_exit, \n");
	unregister_chrdev(piezo_major, DEVICE_NAME);	// free module
}

module_init(dd_piezo_init);
module_exit(dd_piezo_exit);
MODULE_LICENSE("Dual BSD/GPL");



